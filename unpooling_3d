def unpooling_3d(before_pool, after_pool, ksize, strides):
    img_depth = before_pool[0,:,0,0,0].shape[0]
    img_height = before_pool[0,0,:,0,0].shape[0]
    img_width = before_pool[0,0,0,:,0].shape[0]
    img_channel = before_pool[0,0,0,0,:].shape[0]
    
    sparse_matrix = []
    stride_depth = strides[2]  
    num_loop = -1
    total_loop = math.ceil(img_depth/stride_depth)

    for channel in range(img_channel):
        max_pool_value = after_pool[:,:,:,:,channel]
        max_pool_value = max_pool_value.reshape((max_pool_value.size))
        argmax_map_3d = []
        tmp_list = []
        value_go_next = 0        
        for loop in range(total_loop):
            num_loop = num_loop + 1
            # calculate argmax for each depth
            D_0 = before_pool[:,0+loop*stride_depth,:,:,channel].reshape((1, img_height, img_width, 1))
            D_0 = tf.convert_to_tensor(D_0)
            output_0, argmax_0 = tf.nn.max_pool_with_argmax(D_0, ksize=ksize, strides=strides, padding='SAME')
            output_0 = output_0.eval()
            output_0 = output_0.reshape((output_0.size))
            argmax_0 = argmax_0.eval()
            argmax_0 = argmax_0.reshape((argmax_0.size))

            if loop==total_loop-1 and img_depth%stride_depth != 0:
                output_1 = np.zeros(output_0.size)
                argmax_1 = np.zeros(argmax_0.size)
            else:
                D_1 = before_pool[:,1+loop*stride_depth,:,:,channel].reshape((1, img_height, img_width, 1))
                D_1 = tf.convert_to_tensor(D_1)
                output_1, argmax_1 = tf.nn.max_pool_with_argmax(D_1, ksize=ksize, strides=strides, padding='SAME')
                output_1 = output_1.eval()
                output_1 = output_1.reshape((output_0.size))
                argmax_1 = argmax_1.eval()
                argmax_1 = argmax_1.reshape((argmax_0.size))
                
            # get size of argmax and img
            argmax_size = argmax_0.size      
            img_size2d = img_height * img_width

            # get one-D img list size
            scan_size = img_height * img_width * stride_depth          

            # calculate the argmax_map_3d
            for j in range(argmax_size):
                if output_0[j] >= output_1[j]:
                    max_index = argmax_0[j] + img_size2d*0 + scan_size*loop
                else:
                    max_index = argmax_1[j] + img_size2d*1 + scan_size*loop
                argmax_map_3d.append([max_index, max_pool_value[value_go_next]]) 
                value_go_next = value_go_next + 1
            
            # order indices from small to large
            argmax_map_3d.sort(key=takeFirst)        
            
            # lenght of argmax_map
            argmax_map_length = len(argmax_map_3d)
            # loop the argmax map
            map_go_next = 0
            
            # get the size of whole img in one channel
            img_size = before_pool[:,:,:,:,0].size
            print("Unpooling steps:", num_loop+1,"/",total_loop, "done...")   
            
        # fill in zeros to get unpool sparse list
        for i in range(img_size):
            if (map_go_next < argmax_map_length) and (i == argmax_map_3d[map_go_next][0] ):
                tmp_list.append(argmax_map_3d[map_go_next][1])
                map_go_next = map_go_next + 1
            else:
                tmp_list.append(0)
        # getting sparse matrix for all channel
        sparse_matrix.append(tmp_list)
        
    unpool_array = []
    for pixel in range(img_depth*img_height*img_width):
        for channel in range(img_channel):
            unpool_array.append(sparse_matrix[channel][pixel])
    unpool_array = np.array(unpool_array)
    print("--------------------------------")
    return unpool_array
